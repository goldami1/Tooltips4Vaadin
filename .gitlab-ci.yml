variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version" 
  #-DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

stages:
  - build
  - test
  - git-robot
  - deploy

build_project:
  image: maven:3.6.1-jdk-11-slim
  stage: build
  allow_failure: true
  script:
    - mvn com.github.eirslett:frontend-maven-plugin:1.7.6:install-node-and-npm -DnodeVersion="v10.16.0"
    - mvn $MAVEN_CLI_OPTS install

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
#  except:
#    - master

# Verify merge requests using JDK8
#verify:jdk8:
#  <<: *verify

# To deploy packages from CI, create a ci_settings.xml file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for more details.
# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# For `master` branch run `mvn deploy` automatically.
#deploy:jdk8:
#  stage: deploy
#  script:
#    - if [ ! -f ci_settings.xml ];
#        then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for instructions.";
#      fi
#    - 'mvn $MAVEN_CLI_OPTS deploy -s ci_settings.xml'
#  only:
#    - master

git-register-package:
  image: maven:3.6.1-jdk-11-slim
  stage: deploy
  only:
    - master
  allow_failure: true
  before_script:
    - apt-get update && apt-get install -y git coreutils grep
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$GIT_SSH_PRIV_KEY" | base64 -d)
    - git config --global github.token "$GIT_PRIV_REL_ID"
    - git config --global user.email "$GIT_USR_PRIV_E"
    - git config --global user.name "goldami1"
    - mkdir -p ~/.ssh && touch ~/.ssh/known_hosts
    - ssh-keyscan www.${GIT_DOMAIN} >> ~/.ssh/known_hosts
    - echo -e "Host ${GIT_DOMAIN}\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  script:
    - git clone git@${GIT_DOMAIN}:${CI_PROJECT_PATH}.git
    - cd ${CI_PROJECT_NAME}
    - echo "$MAVEN_SETTINGS" > /tmp/tmpMySettingsFile.xml
    - mvn com.github.eirslett:frontend-maven-plugin:1.7.6:install-node-and-npm -DnodeVersion="v10.16.0"
    - mvn -DaltReleaseDeploymentRepository=github::default::https://maven.pkg.${GIT_DOMAIN}/${CI_PROJECT_PATH} -s /tmp/tmpMySettingsFile.xml deploy


git-package-update-artifact:
  image: maven:3.6.1-jdk-11-slim
  stage: git-robot
  only:
    - master
  allow_failure: true
  before_script:
    - apt-get update && apt-get install -y git coreutils grep
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$GIT_SSH_PRIV_KEY" | base64 -d)
    - git config --global github.token "$GIT_PRIV_REL_ID"
    - git config --global user.email "$GIT_USR_PRIV_E"
    - git config --global user.name "goldami1"
    - mkdir -p ~/.ssh && touch ~/.ssh/known_hosts
    - ssh-keyscan www.${GIT_DOMAIN} >> ~/.ssh/known_hosts
    - echo -e "Host ${GIT_DOMAIN}\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  script:
    - git clone git@${GIT_DOMAIN}:${CI_PROJECT_PATH}.git
    - cd ${CI_PROJECT_NAME}
    - git fetch origin
    - git pull
    - git push origin --delete mvn-repo-tmp  > /dev/null 2>&1 || true
    - git fetch origin
    - git pull
    - git branch -d mvn-repo-tmp  > /dev/null 2>&1 || true 
    - git checkout -b mvn-repo-tmp
    - tmpProjectBuildDirectory=$(pwd)
    - mvn com.github.eirslett:frontend-maven-plugin:1.7.6:install-node-and-npm -DnodeVersion="v10.16.0"
    - mvn $MAVEN_CLI_OPTS -DaltReleaseDeploymentRepository=file://${tmpProjectBuildDirectory}/mvn-repo deploy
    - cp ./target/mvn-repo/dev ./dev -r
    - ls -la | grep -v dev | grep -v .git | awk -F' ' '{print $9}' | tail -n +4 | xargs rm -fr
    - rm .gitlab-ci.yml
    - rm .gitignore
    - git add .
    - git commit -m "artifact build - artifact packed by ci auto operation"
    - git push --set-upstream origin mvn-repo-tmp
    - git checkout mvn-repo
    - git checkout mvn-repo-tmp
    - git fetch origin
    - git reset --hard origin/mvn-repo-tmp
    - git pull
    - git merge mvn-repo > /dev/null 2>&1 || true 
    - cd dev/mett/vaadin/tooltip/
    - tmpTop=$(cat maven-metadata.xml | grep -n '<<<<<<<' | cut -d':' -f1)
    - tmpMiddle=$(cat maven-metadata.xml | grep -n '=======' | cut -d':' -f1)
    - tmpBottom=$(cat maven-metadata.xml | grep -n '>>>>>>>' | cut -d':' -f1)
    - tmpData=$(sed -n "${tmpTop},${tmpMiddle}p" maven-metadata.xml)
    - sed -ie "${tmpTop},${tmpMiddle}d;${tmpBottom}d" maven-metadata.xml
    - tmpLastUpdated=$(grep -oPm1 "(?<=<lastUpdated>)[^<]+" <<< "$tmpData")
    - tmpVersion=$(grep -oPm1 "(?<=<release>)[^<]+" <<< "$tmpData")
    - sed -ie "/<metadata>/,/<\/metadata>/ s|<lastUpdated>[0-9a-z.]\{1,\}</lastUpdated>|<lastUpdated>$tmpLastUpdated</lastUpdated>|g" maven-metadata.xml
    - sed -i -e "/<metadata>/,/<\/metadata>/ s|<release>[0-9a-z.]\{1,\}</release>|<release>$tmpVersion</release>|g" maven-metadata.xml
    - sed -i "8i\      <version>$tmpVersion</version>" maven-metadata.xml
    - cat maven-metadata.xml
    - rm maven-metadata.xml.* maven-metadata.xmle
    - md5sum maven-metadata.xml > maven-metadata.xml.md5
    - sha1sum maven-metadata.xml > maven-metadata.xml.sha1
    - cd ../../../..
    - ls -la
    - rm pom.xml README.md  > /dev/null 2>&1 || true
    - git diff --name-only --diff-filter=U
    - git add .
    - git commit -m "artifact update"
    - git push -f origin mvn-repo-tmp
    - git fetch origin
    - git pull
    - git push origin --delete mvn-repo
    - git fetch origin
    - git pull
    - git branch -d mvn-repo
    - git checkout -b mvn-repo
    - git push --set-upstream origin mvn-repo
    - git push origin --delete mvn-repo-tmp

    # - git clone git@gitlab.com:${CI_PROJECT_PATH}.git
    # - cd ${CI_PROJECT_NAME}
    # - git checkout -b mvn-repo-tmp
    # - mvn com.github.eirslett:frontend-maven-plugin:1.7.6:install-node-and-npm -DnodeVersion="v10.16.0"
    # - mvn $MAVEN_CLI_OPTS deploy
    # - cp ./target/mvn-repo/dev ./dev -r
    # - ls -la | grep -v dev | grep -v .git | awk -F' ' '{print $9}' | tail -n +4 | xargs rm -fr
    # - rm .gitlab-ci.yml
    # - rm .gitignore
    # - git add .
    # - git commit -m "artifact build - artifact packed by ci auto operation"
    # - git push --set-upstream origin mvn-repo-tmp
# git-package-new-artifact:
#   image: maven:3.6.1-jdk-11-slim
#   stage: git-robot
#   only:
#     - master
#   allow_failure: true
#   before_script:
#     - apt-get update && apt-get install -y git
#     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
#     - eval $(ssh-agent -s)
#     - ssh-add <(echo "$GIT_SSH_PRIV_KEY" | base64 -d)
#     - git config --global user.email "$GIT_USR_PRIV_E"
#     - git config --global user.name "goldami1"
#     - mkdir -p ~/.ssh && touch ~/.ssh/known_hosts
#     - ssh-keyscan www.gitlab.com >> ~/.ssh/known_hosts
#     - echo -e "Host gitlab.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
#   script:
#     - git clone git@gitlab.com:${CI_PROJECT_PATH}.git
#     - cd ${CI_PROJECT_NAME}
#     - git push origin --delete mvn-repo
#     - git checkout -b mvn-repo
#     - mvn com.github.eirslett:frontend-maven-plugin:1.7.6:install-node-and-npm -DnodeVersion="v10.16.0"
#     - mvn $MAVEN_CLI_OPTS deploy
#     - cp ./target/mvn-repo/dev ./dev -r
#     - ls -la | grep -v dev | grep -v .git | awk -F' ' '{print $9}' | tail -n +4 | xargs rm -fr
#     - rm .gitlab-ci.yml
#     - rm .gitignore
#     - git add .
#     - git commit -m "artifact build - artifact packed by ci auto operation"
#     - git push --set-upstream origin mvn-repo
